---
# install evergreen

- name: install required packages
  sudo: yes
  apt: pkg={{ item }} state=installed
  with_items:
    - nsis
    - python-psycopg2
  tags: evergreen

- name: download the evergreen repo
  sudo_user: opensrf
  git: repo=git://git.evergreen-ils.org/Evergreen.git dest=/home/opensrf/Evergreen version={{ eg_version }}
  tags: evergreen

- name: install the pre-reqs
  sudo: yes
  shell: export PERL_MM_USE_DEFAULT=1 && make -f Open-ILS/src/extras/Makefile.install {{ osname }} chdir=/home/opensrf/Evergreen
  tags: evergreen

- name: install the postgres pre-reqs
  sudo: yes
  command: make -f Open-ILS/src/extras/Makefile.install postgres-server-{{ osname }} chdir=/home/opensrf/Evergreen
  tags: evergreen

- name: generate the configure script and makefiles
  sudo_user: opensrf
  command: autoreconf -i chdir=/home/opensrf/Evergreen
  tags: evergreen

- name: configure and build evergreen
  sudo_user: opensrf
  shell: export PATH=/openils/bin:$PATH && ./configure --prefix=/openils --sysconfdir=/openils/conf && make chdir=/home/opensrf/Evergreen
  tags: evergreen

- name: install evergreen
  sudo: yes
  shell: make STAFF_CLIENT_STAMP_ID={{ eg_version }} install chdir=/home/opensrf/Evergreen
  tags: evergreen

- name: change ownership of /openils to opensrf
  sudo: yes
  shell: chown -R opensrf:opensrf /openils
  tags: evergreen

- name: apply opensrf_core configuration settings
  sudo_user: opensrf
  template: src=opensrf_core.xml.j2 dest=/openils/conf/opensrf_core.xml
  tags: evergreen

- name: copy opensrf.xml in place
  sudo_user: opensrf
  command: cp -b /openils/conf/opensrf.xml.example /openils/conf/opensrf.xml
  tags: evergreen

- name: symlink the staff client version
  sudo_user: opensrf
  file: src=/openils/var/web/xul/{{ eg_version }}/server dest=/openils/var/web/xul/server state=link
  tags: evergreen

- name: download the dojo toolkit
  sudo_user: opensrf
  get_url: url=http://download.dojotoolkit.org/release-{{ dojo_version }}/dojo-release-{{ dojo_version }}.tar.gz dest=/home/opensrf mode=0640
  tags: evergreen

- name: untar dojo to /openils
  sudo_user: opensrf
  command: tar -C /openils/var/web/js -xzf dojo-release-{{ dojo_version }}.tar.gz chdir=/home/opensrf
  tags: evergreen

- name: copy dojo files
  sudo_user: opensrf
  shell: cp -r /openils/var/web/js/dojo-release-{{ dojo_version }}/* /openils/var/web/js/dojo/.
  tags: evergreen

- name: copy apache files
  sudo: yes
  command: cp {{ item.from }} {{ item.to }}
  with_items: apache_files
  tags: evergreen

- name: create the ssl directory
  sudo: yes
  file: path=/etc/apache2/ssl owner=root group=root mode=0755 state=directory
  tags: evergreen

- name: create the self-signed ssl cert 
  sudo: yes
  command: openssl req -new -nodes -x509 -subj "/C=US/ST=California/L=Petaluma/O=IT/CN={{ ansible_hostname }}" -days 365 -keyout /etc/apache2/ssl/server.key -out /etc/apache2/ssl/server.crt creates=/etc/apache2/ssl/server.crt
  tags: evergreen

- name: change the apache run user
  sudo: yes
  lineinfile: dest=/etc/apache2/envvars regexp="export APACHE_RUN_USER=www-data" line="export APACHE_RUN_USER=opensrf"
  tags: evergreen

- name: remove apache lock if present
  sudo: yes
  command: rm -rf /var/lock/apache2
  ignore_errors: true
  tags: evergreen

- name: disable apache default site and enable eg.conf
  sudo: yes
  shell: a2dissite default && a2ensite eg.conf
  ignore_errors: true
  tags: evergreen

- name: conditionally drop the evergreen database
  sudo_user: postgres
  shell: psql -c "select pg_terminate_backend(procpid) from pg_stat_activity where datname='{{ db_name }}';" && dropdb {{ db_name }}
  ignore_errors: true
  when: drop_database
  tags: evergreen

- name: create evergreen database user
  sudo_user: postgres
  postgresql_user: name={{ db_user }} password={{ db_password }} role_attr_flags=SUPERUSER
  when: create_database
  tags: evergreen

- name: create the evergreen database
  sudo: yes
  command: perl Open-ILS/src/support-scripts/eg_db_config 
    --update-config 
    --service all 
    --create-database 
    --create-schema 
    --create-offline 
    --user {{ db_user }}
    --password {{ db_password }}
    --hostname {{ db_host }}
    --port {{ db_port }}
    --database {{ db_name }}
    --admin-user {{ admin_user }}
    --admin-pass {{ admin_password }}
    --load-all-sample
    chdir=/home/opensrf/Evergreen
  ignore_errors: true
  when: create_database
  tags: evergreen

- name: restart opensrf
  sudo_user: opensrf
  shell: export PATH=/openils/bin:$PATH && osrf_control --localhost --kill-with-fire && osrf_control --localhost --start-all
  tags: evergreen

- name: run autogen
  sudo_user: opensrf 
  shell: export PATH=/openils/bin:$PATH && autogen.sh -u 
  tags: evergreen

- name: restart apache
  sudo: yes
  action: service name=apache2 state=restarted enabled=yes
  tags: evergreen

- name: download xulrunners
  sudo_user: opensrf
  get_url: url={{ item }} dest=/home/opensrf/Evergreen/Open-ILS/xul/staff_client
  with_items: xul_versions
  when: make_staff_client
  tags: staff_client

- name: make rigrelease for staff client
  sudo_user: opensrf
  command: make rigrelease chdir=/home/opensrf/Evergreen/Open-ILS/xul/staff_client
  when: make_staff_client
  tags: staff_client

- name: rebuild staff client
  sudo: yes
  command: make rebuild chdir=/home/opensrf/Evergreen/Open-ILS/xul/staff_client
  when: make_staff_client
  tags: staff_client

- name: make updates-client
  sudo: yes
  command: make updates-client chdir=/home/opensrf/Evergreen/Open-ILS/xul/staff_client
  when: make_staff_client
  tags: staff_client
